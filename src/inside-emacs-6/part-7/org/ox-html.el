;;; part of org
;; You can find this code in the original file `lisp/org/ox-html.el'
;; Emacs source repository
;; $ git clone https://git.savannah.gnu.org/git/emacs.git

;;; Define Back-End

(org-export-define-backend 'html
                           '((bold . org-html-bold)
                             (center-block . org-html-center-block)
                             (clock . org-html-clock)
                             (code . org-html-code)
                             (drawer . org-html-drawer)
                             (dynamic-block . org-html-dynamic-block)
                             (entity . org-html-entity)
                             (example-block . org-html-example-block)
                             (export-block . org-html-export-block)
                             (export-snippet . org-html-export-snippet)
                             (fixed-width . org-html-fixed-width)
                             (footnote-reference . org-html-footnote-reference)
                             (headline . org-html-headline)
                             (horizontal-rule . org-html-horizontal-rule)
                             (inline-src-block . org-html-inline-src-block)
                             (inlinetask . org-html-inlinetask)
                             (inner-template . org-html-inner-template)
                             (italic . org-html-italic)
                             (item . org-html-item)
                             (keyword . org-html-keyword)
                             (latex-environment . org-html-latex-environment)
                             (latex-fragment . org-html-latex-fragment)
                             (line-break . org-html-line-break)
                             (link . org-html-link)
                             (node-property . org-html-node-property)
                             (paragraph . org-html-paragraph)
                             (plain-list . org-html-plain-list)
                             (plain-text . org-html-plain-text)
                             (planning . org-html-planning)
                             (property-drawer . org-html-property-drawer)
                             (quote-block . org-html-quote-block)
                             (radio-target . org-html-radio-target)
                             (section . org-html-section)
                             (special-block . org-html-special-block)
                             (src-block . org-html-src-block)
                             (statistics-cookie . org-html-statistics-cookie)
                             (strike-through . org-html-strike-through)
                             (subscript . org-html-subscript)
                             (superscript . org-html-superscript)
                             (table . org-html-table)
                             (table-cell . org-html-table-cell)
                             (table-row . org-html-table-row)
                             (target . org-html-target)
                             (template . org-html-template)
                             (timestamp . org-html-timestamp)
                             (underline . org-html-underline)
                             (verbatim . org-html-verbatim)
                             (verse-block . org-html-verse-block))
                           :filters-alist '((:filter-options . org-html-infojs-install-script)
                                            (:filter-parse-tree . org-html-image-link-filter)
                                            (:filter-final-output . org-html-final-function))
                           :menu-entry
                           '(?h "Export to HTML"
                                ((?H "As HTML buffer" org-html-export-as-html)
                                 (?h "As HTML file" org-html-export-to-html)
                                 (?o "As HTML file and open"
                                     (lambda (a s v b)
                                       (if a (org-html-export-to-html t s v b)
                                         (org-open-file (org-html-export-to-html nil s v b)))))))
                           :options-alist
                           '((:html-doctype "HTML_DOCTYPE" nil org-html-doctype)
                             (:html-container "HTML_CONTAINER" nil org-html-container-element)
                             (:description "DESCRIPTION" nil nil newline)
                             (:keywords "KEYWORDS" nil nil space)
                             (:html-html5-fancy nil "html5-fancy" org-html-html5-fancy)
                             (:html-link-use-abs-url nil "html-link-use-abs-url" org-html-link-use-abs-url)
                             (:html-link-home "HTML_LINK_HOME" nil org-html-link-home)
                             (:html-link-up "HTML_LINK_UP" nil org-html-link-up)
                             (:html-mathjax "HTML_MATHJAX" nil "" space)
                             (:html-equation-reference-format "HTML_EQUATION_REFERENCE_FORMAT" nil org-html-equation-reference-format t)
                             (:html-postamble nil "html-postamble" org-html-postamble)
                             (:html-preamble nil "html-preamble" org-html-preamble)
                             (:html-head "HTML_HEAD" nil org-html-head newline)
                             (:html-head-extra "HTML_HEAD_EXTRA" nil org-html-head-extra newline)
                             (:subtitle "SUBTITLE" nil nil parse)
                             (:html-head-include-default-style
                              nil "html-style" org-html-head-include-default-style)
                             (:html-head-include-scripts nil "html-scripts" org-html-head-include-scripts)
                             (:html-allow-name-attribute-in-anchors
                              nil nil org-html-allow-name-attribute-in-anchors)
                             (:html-divs nil nil org-html-divs)
                             (:html-checkbox-type nil nil org-html-checkbox-type)
                             (:html-extension nil nil org-html-extension)
                             (:html-footnote-format nil nil org-html-footnote-format)
                             (:html-footnote-separator nil nil org-html-footnote-separator)
                             (:html-footnotes-section nil nil org-html-footnotes-section)
                             (:html-format-drawer-function nil nil org-html-format-drawer-function)
                             (:html-format-headline-function nil nil org-html-format-headline-function)
                             (:html-format-inlinetask-function
                              nil nil org-html-format-inlinetask-function)
                             (:html-home/up-format nil nil org-html-home/up-format)
                             (:html-indent nil nil org-html-indent)
                             (:html-infojs-options nil nil org-html-infojs-options)
                             (:html-infojs-template nil nil org-html-infojs-template)
                             (:html-inline-image-rules nil nil org-html-inline-image-rules)
                             (:html-link-org-files-as-html nil nil org-html-link-org-files-as-html)
                             (:html-mathjax-options nil nil org-html-mathjax-options)
                             (:html-mathjax-template nil nil org-html-mathjax-template)
                             (:html-metadata-timestamp-format nil nil org-html-metadata-timestamp-format)
                             (:html-postamble-format nil nil org-html-postamble-format)
                             (:html-preamble-format nil nil org-html-preamble-format)
                             (:html-prefer-user-labels nil nil org-html-prefer-user-labels)
                             (:html-self-link-headlines nil nil org-html-self-link-headlines)
                             (:html-table-align-individual-fields
                              nil nil org-html-table-align-individual-fields)
                             (:html-table-caption-above nil nil org-html-table-caption-above)
                             (:html-table-data-tags nil nil org-html-table-data-tags)
                             (:html-table-header-tags nil nil org-html-table-header-tags)
                             (:html-table-use-header-tags-for-first-column
                              nil nil org-html-table-use-header-tags-for-first-column)
                             (:html-tag-class-prefix nil nil org-html-tag-class-prefix)
                             (:html-text-markup-alist nil nil org-html-text-markup-alist)
                             (:html-todo-kwd-class-prefix nil nil org-html-todo-kwd-class-prefix)
                             (:html-toplevel-hlevel nil nil org-html-toplevel-hlevel)
                             (:html-use-infojs nil nil org-html-use-infojs)
                             (:html-validation-link nil nil org-html-validation-link)
                             (:html-viewport nil nil org-html-viewport)
                             (:html-inline-images nil nil org-html-inline-images)
                             (:html-table-attributes nil nil org-html-table-default-attributes)
                             (:html-table-row-open-tag nil nil org-html-table-row-open-tag)
                             (:html-table-row-close-tag nil nil org-html-table-row-close-tag)
                             (:html-xml-declaration nil nil org-html-xml-declaration)
                             (:html-wrap-src-lines nil nil org-html-wrap-src-lines)
                             (:html-klipsify-src nil nil org-html-klipsify-src)
                             (:html-klipse-css nil nil org-html-klipse-css)
                             (:html-klipse-js nil nil org-html-klipse-js)
                             (:html-klipse-selection-script nil nil org-html-klipse-selection-script)
                             (:infojs-opt "INFOJS_OPT" nil nil)
                             ;; Redefine regular options.
                             (:creator "CREATOR" nil org-html-creator-string)
                             (:with-latex nil "tex" org-html-with-latex)
                             ;; Retrieve LaTeX header for fragments.
                             (:latex-header "LATEX_HEADER" nil nil newline)))
