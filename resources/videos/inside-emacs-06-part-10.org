* [2021-07-07 Wed] Field substitution in Emacs Lisp Formulas | org-table | Inside Emacs #6 (part 10)
:PROPERTIES:
:YOUTUBE_TITLE: Field substitution in Emacs Lisp Formulas | org-table | Inside Emacs #6 (part 10)
:YOUTUBE_LINK: https://youtu.be/w3V8-_qjYgI
:YOUTUBE_UPLOAD_DATE: [2021-07-07 Wed]
:CONFIG_REPO:   https://github.com/tonyaldon/emacs.d
:CONFIG_COMMIT: 15379cdd5e548f1540d677d4386bb5da7d5bc5b0
:VIDEO_SCR_DIR: ../src/inside-emacs-06-part-10/
:END:
** Built-in commands
*** without default key binding

- ~eval-defun~: Evaluate the top-level form containing point, or after
  point.

*** global-map

- ~delete-other-windows~ (~C-x 1~): Make selected window fill its frame.
- ~eval-last-sexp~ (~C-x C-e~): Evaluate sexp before point; print value in
  the echo area.
- ~isearch-forward~ (~C-s~): Do incremental search forward.
- ~previous-buffer~ (~C-x <left>~): In selected window switch to previous
  buffer.

*** isearch-mode-map

- ~isearch-query-replace-regexp~ (~C-M-%~): Start ~query-replace-regexp~
  with string to replace from last search string.

*** org-mode-map

- ~org-ctrl-c-ctrl-c~ (~C-c C-c~): Set tags in headline, or update according
- ~org-table-toggle-formula-debugger~ (~C-c {~): Toggle the formula
  debugger in tables.

** External commands

- ~counsel-find-file~ (from [[https://github.com/abo-abo/swiper][swiper]]): Forward to ~find-file~.
- ~sp-backward-up-sexp~ (from [[https://github.com/Fuco1/smartparens][smartparens]]): Move backward out of one
  level of parentheses.

** Customized commands
*** handy-add-space

~handy-add-space~: Add space at point without moving.

#+BEGIN_SRC emacs-lisp
(defun handy-add-space ()
  "Add space at point without moving."
  (interactive)
  (insert " ")
  (goto-char (- (point) 1)))
#+END_SRC

*** handy-avy-copy-past-sexp

~handy-avy-copy-past-sexp~: Past sexp copied using ~avy~ at current
cursor position.

#+BEGIN_SRC emacs-lisp
(require 'avy)
(require 'smartparens)

(defun handy-avy-copy-past-sexp ()
  "Past sexp copied using `avy' at current cursor position."
  (interactive)
  (let ((initial-window (selected-window)))
    (save-excursion
      (call-interactively 'avy-goto-word-or-subword-1)
      (sp-copy-sexp))
    (select-window initial-window)
    (yank)))
#+END_SRC

*** ta-eval-expression

~ta-eval-expression~: Call ~eval-expression~.  If called with universal
argument, call ~pp-eval-expression~.

#+BEGIN_SRC emacs-lisp
(defun ta-eval-expression (&optional arg)
  "Call `eval-expression'.
If called with universal argument, call `pp-eval-expression'."
  (interactive "P")
  (if arg
      (call-interactively 'pp-eval-expression)
    (call-interactively 'eval-expression)))
#+END_SRC

*** handy-mark-line

~handy-mark-line~: Mark the current line.

#+BEGIN_SRC emacs-lisp
(defun handy-mark-line (arg)
  "Mark the current line.

If call with `universal-argument', copy the line."
  (interactive "p")
  (if (equal arg 4)
      (handy-line-copy)
    ;; HACK: Have to use both `push-mark' and `set-mark' in this order
    ;;       to get expected result.
    (end-of-line)
    (push-mark (point))
    (set-mark (point))
    (beginning-of-line)))
#+END_SRC
** Emacs Lisp

- ~+~: Return sum of any number of arguments, which are numbers or
  markers.
- ~string-to-number~: Parse STRING as a decimal number and return the
  number.
- ~upcase~: Convert argument to upper case and return that.
- ~intern~: Return the canonical symbol whose name is STRING.
- ~type-of~: Return a symbol representing the type of OBJECT.
- ~funcall~: Call first argument as a function, passing remaining
  arguments to it.
