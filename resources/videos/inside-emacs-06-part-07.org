* [2021-06-16 Wed] Use custom formats to export Org tables to HTML tables | org-table | Inside Emacs #6 (part 7)
:PROPERTIES:
:YOUTUBE_TITLE: Use custom formats to export Org tables to HTML tables | org-table | Inside Emacs #6 (part 7)
:YOUTUBE_LINK: https://www.youtube.com/watch?v=LogbcVWb3mQ
:YOUTUBE_UPLOAD_DATE: [2021-06-16 Wed]
:CONFIG_REPO:   https://github.com/tonyaldon/emacs.d
:CONFIG_COMMIT: 06ba16e26da4fbedb430090287aec096bf491037
:VIDEO_SCR_DIR: ../src/inside-emacs-06-part-07/
:END:
** Built-in commands
*** without default key binding

- ~isearch-occur~: Run ~occur~ using the last search string as the
  regexp.

*** global-map

- ~eval-last-sexp~ (~C-x C-e~): Evaluate sexp before point; print value in
  the echo area.
- ~narrow-to-region~ (~C-x n n~): Restrict editing in this buffer to the
  current region.
- ~recenter-top-bottom~ (~C-l~): Scroll the window so that current line is
  in the middle of the window.
- ~isearch-forward~ (~C-s~): Do incremental search forward.

*** org-mode-map

- ~org-edit-special~ (~C-c '~): Call a special editor for the element at
  point.

*** org-src-mode-map

- ~org-edit-src-exit~ (~C-c '~): Kill current sub-editing buffer and
  return to source buffer.

*** org-mode

- ~org-table-export~: Export table to a file, with configurable format.

** External commands

- ~avy-goto-char~ (from [[https://github.com/abo-abo/avy][avy]]): Jump to the currently visible char (read
  in the minibuffer).
- ~avy-goto-line~ (from [[https://github.com/abo-abo/avy][avy]]): Jump to a line start in current buffer.
- ~avy-goto-line~ (from [[https://github.com/abo-abo/avy][avy]]): Jump to a line start in current buffer.
- ~counsel-M-x~ (from [[https://github.com/abo-abo/swiper][counsel]]): Ivy version of ~execute-extended-command~.
- ~counsel-yank-pop~ (from [[https://github.com/abo-abo/swiper][swiper]]): Ivy replacement for ~yank-pop~.
- ~sp-next-sexp~ (from [[https://github.com/Fuco1/smartparens][smartparens]]): Move forward to the beginning of
  next balanced expression.
- ~yas-expand~ (from [[https://github.com/joaotavora/yasnippet][yasnippet]]): Expand a snippet before point.

** Customized commands
*** handy-expand-region-dwim

~handy-expand-region-dwim~: If region is active, call
~er/expand-region~.  If not call ~er/mark-word~.

#+BEGIN_SRC emacs-lisp
(require 'expand-region)

(defun handy-expand-region-dwim (arg)
  "If region is active, call `er/expand-region'.  If not call `er/mark-word'."
  (interactive "p")
  (if (or (region-active-p) (equal last-command this-command))
      (er/expand-region arg)
    (er/mark-word)
    (if (equal arg 4) (exchange-point-and-mark))))
#+END_SRC

*** handy-mark-dwim

~handy-mark-dwim~: Mark the url, sexp or sentence at point.

#+BEGIN_SRC emacs-lisp
(require 'smartparens)
(require 'expand-region)

(defun handy-point-in-url-p ()
  "Return the url at `point' if `point' is in an url."
  (thing-at-point 'url))

(defun handy-point-at-beginning-of-sexp-delimited-by-pairs-p ()
  "Return t if point is at beginning of sexp delimited by pairs."
  (let ((sexp (sp-get-thing)))
    (and (eq (point) (sp-get sexp :beg))
         (not (string-empty-p (sp-get sexp :op))))))

(defun handy-mark-sexp-at-point ()
  "Mark the `sexp' at point."
  (let ((sexp-beg (beginning-of-thing 'sexp))
        (sexp-end (end-of-thing 'sexp)))
    (goto-char sexp-end)
    ;; HACK: Have to use both `push-mark' and `set-mark' in this order to
    ;;       expected result.
    (push-mark sexp-end)
    (set-mark sexp-end)
    (goto-char sexp-beg)))

(defun handy-mark-dwim (arg)
  "Mark the url, sexp or sentence at point.

If point is in a url, call `er/mark-url'.  If not mark sexp at point.
If call 2 times consecutively, call `er/mark-sentence'."
  (interactive "p")
  (cond
   ((equal last-command this-command)
    (er/mark-sentence))
   ((handy-point-in-url-p)
    (er/mark-url))
   ((or (handy-point-at-beginning-of-sexp-delimited-by-pairs-p)
        (eq (following-char) ?<))
    (sp-mark-sexp))
   ((eq (preceding-char) ?\")
    (sp-backward-sexp)
    (sp-mark-sexp))
   ((and (memq (following-char) '(32 ?\) ?\] ?\} ?>))
         (looking-back "[[:alnum:]]" 1))
    (backward-char 1)
    (handy-mark-sexp-at-point))
   (t (handy-mark-sexp-at-point)))
  (if (equal arg 4) (exchange-point-and-mark)))
#+END_SRC

*** handy-mark-inside-dwim

~handy-mark-inside-dwim~: Mark things inside quotes if point is inside
a string.

#+BEGIN_SRC emacs-lisp
(require 'smartparens)
(require 'expand-region)

(defun handy-mark-inside-field ()
  "Mark current field inside org-table."
  (interactive)
  (when (org-at-table-p)
    (push-mark (point))
    (re-search-forward "|")
    (backward-char)
    (skip-chars-backward " ")
    (push-mark (point))
    (set-mark (point))
    (org-table-beginning-of-field 1)))

(defun handy-mark-inside-pairs ()
  "An other way to do `er/mark-inside-pairs' but work for sgml-tag too."
  (interactive)
  (handy-mark-goto-beginning-of-string (point))
  ;; todo: do thing when inside a tag <tag name="tony"> (maybe use the function sgml-begining-of-tag)
  (sp-backward-up-sexp)
  (sp-mark-sexp)
  (sp-down-sexp)
  (exchange-point-and-mark)
  (sp-backward-down-sexp)
  (exchange-point-and-mark))

(defun handy-mark-inside-dwim (&optional arg)
  "Mark things inside quotes if point is inside a string.

If not inside string, mark inside table field in `org-mode'.
In other modes, mark things inside pairs.
If call two times consecutively mark inside pairs."
  (interactive)
  (cond ((equal last-command this-command)
         (call-interactively 'handy-mark-inside-pairs))
        ((er--point-inside-string-p)
         (call-interactively 'er/mark-inside-quotes))
        ((and (equal major-mode 'org-mode) (org-at-table-p))
         (handy-mark-inside-field))
        (t (call-interactively 'handy-mark-inside-pairs))))
#+END_SRC

*** insight-scroll-up-half-window

~insight-scroll-up-half-window~: Scroll up of half window height.

#+BEGIN_SRC emacs-lisp
(defun insight--half-window-height ()
  "Compute half window height."
  (/ (window-body-height) 2))

(defun insight-scroll-up-half-window ()
  "Scroll up of half window height."
  (interactive)
  (scroll-up (insight--half-window-height)))
#+END_SRC

*** ta-avy-goto-end-of-line

~ta-avy-goto-end-of-line~: Jump to the visible end of line.

#+BEGIN_SRC emacs-lisp
(require 'avy)

(defun ta-avy-goto-end-of-line ()
  "Jump to the visible end of line.
Call `avy-goto-char' with \"\n\" as argument."
  (interactive)
  (avy-goto-char ?\n))
#+END_SRC

*** ta-describe-thing-at-point

~ta-describe-thing-at-point~: Display the full documentation of the
~thing-at-point~.

#+BEGIN_SRC emacs-lisp
(defun ta-describe-thing-at-point ()
  "Display the full documentation of the `thing-at-point'.

Return nil if the symbol of the `thing-at-point' is neither a function
nor a variable."
  (interactive)
  (when-let* ((symbol (symbol-at-point))
              (symbol-n (symbol-name symbol)))
    (when (and (eq major-mode 'org-mode)
               (s-starts-with-p "~" symbol-n)
               (s-ends-with-p "~" symbol-n))
      (setq symbol (->> symbol-n
                        (s-chop-prefix "~")
                        (s-chop-suffix "~")
                        (intern))))
    (describe-symbol symbol)))
#+END_SRC

** Emacs Lisp

- ~orgtbl-to-generic~: Convert the orgtbl-mode TABLE to some other
  format.
- ~orgtbl-to-html~: Convert the orgtbl-mode TABLE to HTML.
- ~org-export-define-backend~: Define a new back-end BACKEND.
- ~org-export-options-alist~: Alist between export properties and ways
  to set them.
