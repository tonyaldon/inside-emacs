#+TITLE: FIXME: Inside Emacs 6 part 8
#+AUTHOR: Tony Aldon
#+DATE: <2021-08-05 Thu>
#+PROPERTY: YOUTUBE_LINK  https://youtu.be/JyG54FFWu-o
#+PROPERTY: CONFIG_REPO   https://github.com/tonyaldon/emacs.d
#+PROPERTY: CONFIG_COMMIT 06ba16e26da4fbedb430090287aec096bf491037
#+PROPERTY: VIDEO_SCR_DIR ../src/inside-emacs-06-part-08/
#+TAGS: FIXME

* Description

* Commands
** built-in
*** without default key binding

~org-table-transpose-table-at-point~: Transpose Org table at point and
eliminate hlines.

~orgtbl-insert-radio-table~: Insert a radio table template appropriate
for this major mode.

~orgtbl-mode~: Toggle ~orgtbl-mode~ mode.

*** global-map

~recenter-top-bottom~ (~C-l~): Scroll the window so that current line is
in the middle of the window.

*** orgtbl-mode-map

~orgtbl-hijacker-command-4~ (~M-S-<right>~): In tables, run
~org-table-insert-column~.  Outside of tables, run the binding of
~M-S-<right>~.

~orgtbl-hijacker-command-100~ (~<return>~): In tables, run ~orgtbl-ret~.
Outside of tables, run the binding of ~<return>~ or ~RET~.

~orgtbl-hijacker-command-102~ (~<tab>~): In tables, run ~orgtbl-tab~.
Outside of tables, run the binding of ~<tab>~ or ~TAB~.

~orgtbl-hijacker-command-17~ (~S-<return>~): In tables, run
~org-table-copy-down~.  Outside of tables, run the binding of
~S-<return>~.

~orgtbl-hijacker-command-109~ (~<backspace>~): In tables, run
~org-delete-backward-char~.  Outside of tables, run the binding of
~<backspace>~ or ~DEL~.

~orgtbl-ctrl-c-ctrl-c~ (~C-c C-c~): If the cursor is inside a table,
realign the table.  If it is a table to be sent away to a receiver, do
it.  With universal argument, also recompute table.

** external

~counsel-M-x~ (from [[https://github.com/abo-abo/swiper][counsel]]): Ivy version of ~execute-extended-command~.

~counsel-yank-pop~ (from [[https://github.com/abo-abo/swiper][swiper]]): Ivy replacement for ~yank-pop~.

** customized
*** ta-avy-goto-end-of-line
~ta-avy-goto-end-of-line~: Jump to the visible end of line.

#+BEGIN_SRC emacs-lisp
(require 'avy)

(defun ta-avy-goto-end-of-line ()
  "Jump to the visible end of line.
Call `avy-goto-char' with \"\n\" as argument."
  (interactive)
  (avy-goto-char ?\n))
#+END_SRC

* Emacs Lisp
** orgtbl-radio-table-templates
~orgtbl-radio-table-templates~: Templates for radio tables in different
major modes.

#+BEGIN_SRC emacs-lisp
(defcustom orgtbl-radio-table-templates
  '((latex-mode "% BEGIN RECEIVE ORGTBL %n
% END RECEIVE ORGTBL %n
\\begin{comment}
,#+ORGTBL: SEND %n orgtbl-to-latex :splice nil :skip 0
| | |
\\end{comment}\n")
    (texinfo-mode "@c BEGIN RECEIVE ORGTBL %n
@c END RECEIVE ORGTBL %n
@ignore
,#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
@end ignore\n")
    (html-mode "<!-- BEGIN RECEIVE ORGTBL %n -->
<!-- END RECEIVE ORGTBL %n -->
<!--
,#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
-->\n")
    (org-mode "#+ BEGIN RECEIVE ORGTBL %n
,#+ END RECEIVE ORGTBL %n

,#+ORGTBL: SEND %n orgtbl-to-orgtbl :splice nil :skip 0
| | |
"))
  "Templates for radio tables in different major modes.
Each template must define lines that will be treated as a comment and that
must contain the \"BEGIN RECEIVE ORGTBL %n\" and \"END RECEIVE ORGTBL\"
lines where \"%n\" will be replaced with the name of the table during
insertion of the template.  The transformed table will later be inserted
between these lines.

The template should also contain a minimal table in a multiline comment.
If multiline comments are not possible in the buffer language,
you can pack it into a string that will not be used when the code
is compiled or executed.  Above the table will you need a line with
the fixed string \"#+ORGTBL: SEND\", followed by instruction on how to
convert the table into a data structure useful in the
language of the buffer.  Check the manual for the section on
\"Translator functions\", and more generally check out
the Info node `(org)Tables in arbitrary syntax'.

All occurrences of %n in a template will be replaced with the name of the
table, obtained by prompting the user."
  :group 'org-table
  :type '(repeat
          (list (symbol :tag "Major mode")
                (string :tag "Format"))))
#+END_SRC

** advice-add
~advice-add~: Like ~add-function~ but for the function named SYMBOL.

#+BEGIN_SRC emacs-lisp
(defun advice-add (symbol where function &optional props)
  "Like `add-function' but for the function named SYMBOL.
Contrary to `add-function', this will properly handle the cases where SYMBOL
is defined as a macro, alias, command, ..."
  ;; TODO:
  ;; - record the advice location, to display in describe-function.
  ;; - change all defadvice in lisp/**/*.el.
  ;; - obsolete advice.el.
  (let* ((f (symbol-function symbol))
         (nf (advice--normalize symbol f)))
    (unless (eq f nf) (fset symbol nf))
    (add-function where (cond
                         ((eq (car-safe nf) 'macro) (cdr nf))
                         ;; Reasons to delay installation of the advice:
                         ;; - If the function is not yet defined, installing
                         ;;   the advice would affect `fboundp'ness.
                         ;; - the symbol-function slot of an autoloaded
                         ;;   function is not itself a function value.
                         ;; - `autoload' does nothing if the function is
                         ;;   not an autoload or undefined.
                         ((or (not nf) (autoloadp nf))
                          (get symbol 'advice--pending))
                         (t (symbol-function symbol)))
                  function props)
    (put symbol 'function-documentation `(advice--make-docstring ',symbol))
    (add-function :around (get symbol 'defalias-fset-function)
      #'advice--defalias-fset))
  nil)
#+END_SRC

** inhibit-message
~inhibit-message~: Non-nil means calls to ~message~ are not displayed.

#+BEGIN_SRC C
void
syms_of_xdisp (void)
{
/* ... */

  DEFVAR_BOOL ("inhibit-message", inhibit_message,
              doc:  /* Non-nil means calls to `message' are not displayed.
They are still logged to the *Messages* buffer.

Do NOT set this globally to a non-nil value, as doing that will
disable messages everywhere, including in I-search and other
places where they are necessary.  This variable is intended to
be let-bound around code that needs to disable messages temporarily. */);
  inhibit_message = false;

/* ... */

}
#+END_SRC

** indent-region
~indent-region~: Indent each nonblank line in the region.

#+BEGIN_SRC emacs-lisp
(defun indent-region (start end &optional column)
  "Indent each nonblank line in the region.
A numeric prefix argument specifies a column: indent each line to that column.

With no prefix argument, the command chooses one of these methods and
indents all the lines with it:

  1) If `fill-prefix' is non-nil, insert `fill-prefix' at the
     beginning of each line in the region that does not already begin
     with it.
  2) If `indent-region-function' is non-nil, call that function
     to indent the region.
  3) Indent each line via `indent-according-to-mode'.

Called from a program, START and END specify the region to indent.
If the third argument COLUMN is an integer, it specifies the
column to indent to; if it is nil, use one of the three methods above."
  (interactive "r\nP")
  (cond
   ;; If a numeric prefix is given, indent to that column.
   (column
    (setq column (prefix-numeric-value column))
    (save-excursion
      (goto-char end)
      (setq end (point-marker))
      (goto-char start)
      (or (bolp) (forward-line 1))
      (while (< (point) end)
        (delete-region (point) (progn (skip-chars-forward " \t") (point)))
        (or (eolp)
            (indent-to column 0))
        (forward-line 1))
      (move-marker end nil)))
   ;; If a fill-prefix is specified, use it.
   (fill-prefix
    (save-excursion
      (goto-char end)
      (setq end (point-marker))
      (goto-char start)
      (let ((regexp (regexp-quote fill-prefix)))
        (while (< (point) end)
          (or (looking-at regexp)
              (and (bolp) (eolp))
              (insert fill-prefix))
          (forward-line 1)))))
   ;; Use indent-region-function is available.
   (indent-region-function
    (save-restriction
      (widen)
      (funcall indent-region-function start end)))
   ;; Else, use a default implementation that calls indent-line-function on
   ;; each line.
   (t (indent-region-line-by-line start end)))
  ;; In most cases, reindenting modifies the buffer, but it may also
  ;; leave it unmodified, in which case we have to deactivate the mark
  ;; by hand.
  (setq deactivate-mark t))
#+END_SRC
