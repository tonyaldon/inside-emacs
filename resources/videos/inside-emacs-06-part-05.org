#+TITLE: FIXME: Inside Emacs 6 part 5
#+AUTHOR: Tony Aldon
#+DATE: <2021-08-05 Thu>
#+PROPERTY: YOUTUBE_LINK  https://youtu.be/w4wxGOijyZs
#+PROPERTY: CONFIG_REPO   https://github.com/tonyaldon/emacs.d
#+PROPERTY: CONFIG_COMMIT 852afb87e258c90a8e79a026dae369272b3b5280
#+PROPERTY: VIDEO_SCR_DIR ../src/inside-emacs-06-part-05/
#+TAGS: FIXME

* Description

* Commands
** built-in
*** global-map

~eval-expression~ (~M-:~): Read an Emacs Lisp expression in the minibuffer
and evaluate it.

*** org-mode-map

~org-cycle~ (~TAB~): TAB-action and visibility cycling for Org mode.

~org-metadown~ (~M-<down>~): Move subtree down or move table row down.

~org-metaleft~ (~M-<left>~): Promote heading, list item at point or move
table column left.

~org-metaright~ (~M-<right>~): Demote heading, list item at point or move
table column right.

~org-metaup~ (~M-<up>~): Move subtree up or move table row up.

~org-return~ (~RET~): Goto next table row or insert a newline.

~org-shiftdown~ (~S-<down>~): Act on current element according to
context.  Call ~org-timestamp-down~ or ~org-priority-down~, or
~org-next-item~, or ~org-table-move-cell-down~.

~org-shiftleft~ (~S-<left>~): Act on current element according to
context.  This does one of the following: 1) switch a timestamp at
point one day into the past, 2) on a headline, switch to the previous
TODO keyword, 3) on an item, switch entire list to the previous bullet
type, 4) on a property line, switch to the previous allowed value, 5)
on a clocktable definition line, move time block into the past, 6) in
a table, move a single cell left,

~org-shiftmetadown~ (~M-S-<down>~): Drag the line at point down.  In a
table, insert an empty row at the current line.  On a clock timestamp,
update the value of the timestamp like ~S-<down>~ but also adjust the
previous clocked item in the clock history.

~org-shiftmetaleft~ (~M-S-<left>~): Promote subtree or delete table
column.

~org-shiftmetaright~ (~M-S-<right>~): Demote subtree or insert table
column.

~org-shiftmetaup~ (~M-S-<up>~): Drag the line at point up.  In a table,
kill the current row.  On a clock timestamp, update the value of the
timestamp like ~S-<up>~ but also adjust the previous clocked item in the
clock history.

~org-shiftright~ (~S-<right>~): Act on the current element according to
context.  This does one of the following: 1) switch a timestamp at
point one day into the future, 2) on a headline, switch to the next
TODO keyword, 3) on an item, switch entire list to the next bullet
type, 4) on a property line, switch to the next allowed value, 5) on a
clocktable definition line, move time block into the future, 6) in a
table, move a single cell right,

~org-shifttab~ (~S-TAB~): Global visibility cycling or move to previous
table field.

~org-shiftup~ (~S-<up>~): Act on current element according to context.
Call ~org-timestamp-up~ or ~org-priority-up~, or ~org-previous-item~,
or ~org-table-move-cell-up~.

~org-table-blank-field~ (~C-SPC~): Blank the current table field or active
region.

~org-table-copy-down~ (~S-RET~): Copy the value of the current field one
row below.

** external

~avy-goto-char~ (from [[https://github.com/abo-abo/avy][avy]]): Jump to the currently visible char (read in
the minibuffer).

** customized
*** ta-mark-inside-dwim
~ta-mark-inside-dwim~: Mark things inside quotes if point is inside a
string.

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(require 'smartparens)

(defun ta-mark-inside-org-table ()
  "Mark current field inside org-table."
  (interactive)
  (when (org-at-table-p)
    (push-mark (point))
    (re-search-forward "|")
    (backward-char)
    (skip-chars-backward " ")
    (push-mark (point))
    (set-mark (point))
    (org-table-beginning-of-field 1)))

(defun ta-mark-inside-pairs ()
  "An other way to do `er/mark-inside-pairs' but work for sgml-tag too."
  (interactive)
  (ta-goto-begining-of-string (point))
  (sp-backward-up-sexp)
  (sp-mark-sexp)
  (sp-down-sexp)
  (exchange-point-and-mark)
  (sp-backward-down-sexp)
  (exchange-point-and-mark))

(defun ta-mark-inside-dwim (&optional arg)
  "Mark things inside quotes if point is inside a string.

If not inside string, mark inside table field in `org-mode'.
In other modes, mark things inside pairs.
If call two times consecutively mark inside pairs."
  (interactive)
  (cond ((equal last-command 'ta-mark-inside-dwim)
         (call-interactively 'ta-mark-inside-pairs))
        ((er--point-inside-string-p)
         (call-interactively 'er/mark-inside-quotes))
        ((and (equal major-mode 'org-mode) (org-at-table-p))
         (ta-mark-inside-org-table))
        (t (call-interactively 'ta-mark-inside-pairs))))

#+END_SRC

*** ta-mark-sexp-at-point
~ta-mark-sexp-at-point~: Mark the ~sexp~ at point.

#+BEGIN_SRC emacs-lisp
(require 'smartparens)

(defun ta--point-at-beginnig-sp-sexp-p ()
  "Return non-nil if `point' is at the beginning of a sp-sexp

and :op non empty. See `sp-get-thing'."
  (let ((ok (sp-get-thing)))
    (when ok
      (when (and (eq (point) (sp-get ok :beg))
                 (not (string-empty-p (sp-get ok :op))))
        (point)))))

(defun ta--mark-sexp-at-point ()
  "Mark the `sexp' at point."
  (let ((sexp-beg (beginning-of-thing 'sexp))
        (sexp-end (end-of-thing 'sexp)))
    (goto-char sexp-end)
    (set-mark sexp-end)
    (goto-char sexp-beg)))

(defun ta-mark-sexp-at-point ()
  "Mark the `sexp' at point. See `sexp-at-point' and `sp-mark-sexp'
(smartparens packages)."
  (interactive)
  (if (or (ta--point-at-beginnig-sp-sexp-p)
          (eq (following-char) ?<))
      (sp-mark-sexp)
    (if (eq (preceding-char) ?\")
        (progn
          (sp-backward-sexp)
          (sp-mark-sexp))
      (if (and (memq (following-char) '(32 ?\) ?\] ?\} ?>))
               (looking-back "[[:alnum:]]" 1))
          (backward-char 1))
      (ta--mark-sexp-at-point))))
#+END_SRC

*** ta-org-table-previous-row
~ta-org-table-previous-row~: Go to the previous row (same column) in the
current table.

#+BEGIN_SRC emacs-lisp
(defun ta-org-table-previous-row ()
  "Go to the previous row (same column) in the current table.
Before doing so, re-align the table if necessary."
  (interactive)
  (unless (org-at-table-hline-p)
    (org-table-maybe-eval-formula)
    (org-table-maybe-recalculate-line))
  (if (and org-table-automatic-realign
           org-table-may-need-update)
      (org-table-align))
  (let ((col (org-table-current-column)))
    (when (and (org-at-table-p)
               (not (= (org-table-current-line) 1)))
      (previous-line)
      (unless (org-at-table-hline-p)
        (org-table-goto-column col)))))
#+END_SRC

* Emacs Lisp

- ~org-table-auto-blank-field~: Non-nil means automatically blank table
  field when starting to type into it.
- ~org-table-copy-increment~: Non-nil means increment when copying
  current field with ~org-table-copy-down~.
