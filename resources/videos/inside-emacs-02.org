* [2020-08-07 Fri] winner-undo, transpose-frame, dired, kmacro, universal-argument | Inside Emacs #2
:PROPERTIES:
:YOUTUBE_TITLE: winner-undo, transpose-frame, dired, kmacro, universal-argument | Inside Emacs #2
:YOUTUBE_LINK: https://youtu.be/Tc4-sLf8HBc
:YOUTUBE_UPLOAD_DATE: [2020-08-07 Fri]
:CONFIG_REPO:   https://github.com/tonyaldon/emacs.d
:CONFIG_COMMIT: f760601bfc92bac7570f74396dbe1e4910af86af
:VIDEO_SCR_DIR: ../src/inside-emacs-02/
:END:
** Built-in commands
*** without default key binding

- ~replace-string~: Interactively, replace occurrences of a string
  read in the minibuffer by another string read in the minibuffer.

*** global-map

- ~forward-paragraph~ (~C-<down>~): Move forward to end of paragraph.
- ~isearch-backward~ (~C-r~): Do incremental search backward.
- ~isearch-forward~ (~C-s~): Do incremental search forward.
- ~kmacro-bind-to-key~ (~C-x C-k b~): When not defining or executing a
  macro, offer to bind last macro to a key.
- ~kmacro-end-macro~ (~C-x )~): Finish defining a keyboard macro.
- ~kmacro-start-macro~ (~C-x (~): Record subsequent keyboard input,
  defining a keyboard macro.
- ~set-mark-command~ (~C-@~): Set the mark where point is, and activate
  it; or jump to the mark.
- ~universal-argument~ (~C-u~): Begin a numeric argument for the following
  command.
- ~winner-undo~ (~C-c <left>~): Switch back to an earlier window
  configuration saved by Winner mode.

*** dired-mode-map

- ~dired-do-find-marked-files~ (~F~): Find all marked files displaying all
  of them simultaneously.
- ~dired-mark~ (~m~): Mark the file at point in the Dired buffer.
- ~dired-unmark-all-marks~ (~U~): Remove all marks from all files in the
  Dired buffer.

** External commands

- ~avy-goto-word-or-subword-1~ (from [[https://github.com/abo-abo/avy][avy]]): Jump to the currently visible
  char (read in the minibuffer) at a subword or word start.
- ~dired-narrow~ (from [[https://melpa.org/#/dired-narrow][dired-narrow]]): Narrow a dired buffer to the files
  matching a string.
- ~er/expand-region~ (from [[https://github.com/magnars/expand-region.el][expand-region]]):
- ~mc/insert-numbers~ (from [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]): Insert increasing numbers
  for each cursor, starting at ~mc/insert-numbers-default~ or universal
  argument.
- ~mc/mark-next-like-this~ (from [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]): Find and mark the
  next part of the buffer matching the currently active region.
- ~transpose-frame~ (from [[https://melpa.org/#/transpose-frame][transpose-frame]]): Transpose windows
  arrangement at the current frame.
- ~yas-expand~ (from [[https://github.com/joaotavora/yasnippet][yasnippet]]): Expand a snippet before point. If no
  snippet

** Customized commands
*** ta-mark-inside-quotes-or-pairs

~ta-mark-inside-quotes-or-pairs~: Mark inside quotes or inside pairs
if called with universal argument.

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(require 'smartparens)

(defun ta-point-in-string-p (pt)
  "Returns t if PT is in a string"
  (eq 'string (syntax-ppss-context (syntax-ppss pt))))

(defun ta-goto-begining-of-string (pt)
  "Go to begining of the string if PT is inside a string.
Return nil if PT isn't inside a string. See the function `ta-point-in-string-p'"
  (if (ta-point-in-string-p pt)
      (goto-char (nth 8 (syntax-ppss pt)))
    nil))

(defun ta-mark-inside-pairs ()
  "An other way to do `er/mark-inside-pairs' but work for sgml-tag too."
  (interactive)
  (ta-goto-begining-of-string (point))
  (sp-backward-up-sexp)
  (sp-mark-sexp)
  (sp-down-sexp)
  (exchange-point-and-mark)
  (sp-backward-down-sexp)
  (exchange-point-and-mark))

(defun ta-mark-inside-quotes-or-pairs (&optional arg)
  "Mark inside quotes or inside pairs if call with universal argument.

When ARG is 4, mark inside pairs calling `ta-mark-inside-pairs'."
  (interactive "p")
  (if (equal arg 4)
      (call-interactively 'ta-mark-inside-pairs)
    (call-interactively 'er/mark-inside-quotes)))
#+END_SRC

*** ta-toggle-write-mode

~ta-toggle-write-mode~: Toggle to the Writable variant of the current
mode.

#+BEGIN_SRC emacs-lisp
(defun ta-toggle-write-mode ()
  "Toggle to the Writable variant of the current mode.

Call command `dired-toggle-read-only' if `major-mode' is equal
`dired-mode' and call command `wgrep-change-to-wgrep-mode' if
`major-mode' is equal to `grep-mode'."
  (interactive)
  (cond ((string-equal major-mode "dired-mode")
         (call-interactively 'dired-toggle-read-only))
        ((memq major-mode '(grep-mode ivy-occur-grep-mode))
         (call-interactively 'wgrep-change-to-wgrep-mode))
        (t (message "Must be in `dired-mode' or `grep-mode' mode."))))
#+END_SRC

*** ta-w-finish-edit

~ta-w-finish-edit~: Abort changes and return to the appropiate mode.

#+BEGIN_SRC emacs-lisp
(defun ta-w-finish-edit ()
  "Abort changes and return to the appropiate mode.

Call command `wdired-finish-edit' if `major-mode' is
`wdired-mode' and call command `wgrep-finish-edit' if
`major-mode' is `grep-mode'."
  (interactive)
  (cond ((string-equal major-mode "wdired-mode")
         (call-interactively 'wdired-finish-edit))
        ((memq major-mode '(grep-mode ivy-occur-grep-mode))
         (call-interactively 'wgrep-finish-edit))
        (t (message "Must be in `wdired-mode' or `grep-mode'."))))
#+END_SRC
