#+TITLE: Questions and Answers
#+AUTHOR: Tony Aldon
#+DATE: <2021-08-05 Thu>

As the number of videos produced increases, comments, questions,
answers and conversations increase too.

*Comments* sometimes contain /suggestions/ to improve the videos,
sometimes they contain /emacs insights/ I didn't know, sometimes they
contain /questions/, and sometimes they contain /kind words/.

I *learn a lot* from all the *comments* I received, I /read/ all of them,
and /answer/ to all.  Thank you all for these instructive interactions.

Those /interactions/ are *scattered* over the internet (Reddit, Youtube,
twitter, ...) and with this document I try to *aggregate* them in a
Q&A style.

I hope this document is useful for you.

If you have any questions or suggestions, *contact me* by [[mailto:tony.aldon.adm@gmail.com][mail]] or DM on
Twitter ([[https://twitter.com/tonyaldon][@tonyaldon]]) or Reddit ([[https://www.reddit.com/user/tonyaldon][u/tonyaldon]]).

* What key bindings paradigm are you using?
The original question is "Would you mind sharing what you are using
to navigate.  Looks like any. Is it?" posted on Reddit (see [[https://www.reddit.com/r/emacs/comments/oc8ap9/the_bases_of_the_org_spreadsheet_limitless_is/h40pd0k?utm_source=share&utm_medium=web2x&context=3][comment]]).

I've rebound mostly every standard keybindings.  I've not thought
about the general use of these bindings, I just wanted them to fit the
specific [[https://github.com/tonyaldon/keyboard-layout][keyboard-layout]] I'm using.

If I can't remember a key binding, mostly it's because I almost don't
use the command it maps to.  In that case, I remove it.
** Enhanced key bindings
To get most of Emacs key bindings, I use the packages ~hydra~ and
~key-chord~.

[[https://github.com/abo-abo/hydra][hydra]] package offers a flexible and convenient way to make a bunch of
related commands share a same key sequence prefix.

I set ~hydra-hint-display-type~ to ~'message~ to not have the minibuffer
changed when I use an ~hydra~.  And, all my ~hydras~ have the parameter
~:hint~ set to ~nil~.  I never want to see the keys printed.

[[https://github.com/emacsorphanage/key-chord][key-chord]] package implements support for mapping a pair of
simultaneously pressed keys to a command and for mapping the same key
being pressed twice in quick succession to a command.  Such bindings
are called "key chords".
** Emacs text navigation
To jump to visible text using a char-based decision tree, I use
[[https://github.com/abo-abo/avy][avy]].

To move to non visible text in the current buffer, I use the built-in
~isearch-forward~ and ~isearch-backward~ commands.

To operate *lines* (including moving the cursor around), I use the
*hydra* ~handy-line~ defined below.

To operate on *s-expressions* (including moving the cursor around by
s-exp steps), I use the *hydra* ~handy-sexp~ defined below.

I use color to know when I've an active ~hydra~. When ~handy-line~ is
*active* the cursor has the color ~#f92672~. When ~handy-sexp~ is
*active* the cursor has the color ~#fa87ce~.

Some commands used in those ~hydras~ depends on some custom commands
defined in my little package ~handy~ that you can find here:

[[https://github.com/tonyaldon/emacs.d/blob/master/packages/handy.el][tonyaldon/emacs.d/packages/handy.el]].

You can also find those ~hydra~ definitions in:

[[https://github.com/tonyaldon/emacs.d/blob/master/init.el][tonyaldon/emacs.d/init.el]].

*** Operate on lines
To operate on *lines* I use the following ~hydra~:

#+BEGIN_SRC emacs-lisp
(require 'handy)
(require 'key-chord)
(require 'org)
(require 'drag-stuff)

(defvar handy-line-active nil)

(defun handy-line-active ()
  "Toggle status of `handy-line-active'"
  (if handy-line-active
      (setq handy-line-active nil)
    (setq handy-line-active t)))

(defhydra handy-line
  (:pre (progn (if insight-mode (insight-mode -1))
               (set-cursor-color "#fa87ce"))
   :post (progn (set-cursor-color "#26f9ad")
                (handy-line-active))
   :hint nil)
  ("M-l" recenter-top-bottom)
  ("t" handy-sexp/body :color blue)
  (";" handy-line-comment)
  ("DEL" delete-backward-char)
  ("~" set-mark-command)
  ("m" exchange-point-and-mark)
  ;; action on line(s)
  ("!" flush-lines)
  ("?" keep-lines)
  ;; current line
  ("k" kill-line)
  ("l" (kill-line 0))
  ("x" handy-line-kill)
  ("y" handy-line-copy-paste-below)
  ("r" join-line)
  ("o" open-line)
  ("O" delete-blank-lines)
  ("," handy-cycle-spacing)
  ;; to insert text
  ("u" handy-line-add-above :color blue)
  ("]" handy-line-add-below :color blue)
  ("_" handy-add-space :color blue)
  ;; quick motions
  ("n" next-line)
  ("p" previous-line)
  ("f" forward-char)
  ("b" backward-char)
  ("i" back-to-indentation)
  ("a" move-beginning-of-line)
  ("e" move-end-of-line)
  ("M-f" forward-word)
  ("M-b" backward-word)
  ("M-e" org-forward-sentence)
  ("M-a" org-backward-sentence)
  ;; drag stuff
  ("d" drag-stuff-up)
  ("s" drag-stuff-down)
  ("<left>" drag-stuff-left)
  ("<right>" drag-stuff-right)
  ;; clean/undo/nil
  ("M--" undo)
  ("q" nil))

(defadvice move-beginning-of-line (before move-beginning-of-line-advice activate)
  (if (not mark-active) (push-mark)))

(defadvice move-end-of-line (before move-end-of-line-advice activate)
  (if (not mark-active) (push-mark)))

(defadvice handy-line/body (before handy-line-advice activate)
  (handy-line-active))
#+END_SRC

*** Operate on sexps
To operate on *sexps* I use the following ~hydra~:

#+BEGIN_SRC emacs-lisp
(require 'handy)
(require 'hydra)
(require 'smartparens)
(require 'key-chord)

(defhydra handy-sexp
  (:pre (progn (if insight-mode (insight-mode -1))
               (set-cursor-color "#f92672"))
   :post (set-cursor-color "#26f9ad")
   :hint nil)
  ("t" handy-line/body :color blue)
  ;; miscellaneous
  ("~" set-mark-command)
  ("T" exchange-point-and-mark)
  ("r" join-line)
  ;; (";" sp-comment)
  ("_" handy-add-space :color blue)
  ;; kill
  ("M-d" sp-kill-sexp)
  ("DEL" sp-backward-kill-sexp)
  ("C" sp-copy-sexp)
  ("c" handy-avy-copy-past-sexp :color blue)
  ("C-y" sp-clone-sexp)
  ;; reshape
  ("," sp-change-enclosing :color blue)
  (";" sp-change-inner :color blue)
  (":" sp-split-sexp)
  ("M-:" sp-join-sexp)
  (">" sp-absorb-sexp)
  ("}" sp-emit-sexp)
  ("%" sp-convolute-sexp)
  ("M-f" sp-forward-slurp-sexp)
  ("M-b" sp-backward-slurp-sexp)
  ("<left>" sp-splice-sexp-killing-backward)
  ("<right>" sp-splice-sexp-killing-forward)
  ("<up>" sp-raise-sexp)
  ("/" sp-splice-sexp)
  ;; motion
  ("M-p" sp-beginning-of-previous-sexp)
  ("M-n" sp-beginning-of-next-sexp)
  ("C-M-p" sp-end-of-previous-sexp)
  ("C-M-n" sp-end-of-next-sexp)
  ("f" sp-forward-sexp)
  ("b" sp-backward-sexp)
  ("n" sp-next-sexp)
  ("p" sp-previous-sexp)
  ("u" sp-backward-up-sexp)
  ("i" sp-down-sexp)
  ("x" sp-up-sexp)
  ("y" sp-backward-down-sexp)
  ("a" sp-beginning-of-sexp)
  ("e" sp-end-of-sexp)
  ("d" handy-sp-drag-backward)
  ("s" handy-sp-drag-forward)
  ;; parenthese type
  ("$" sp-show-enclosing-pair)
  ("{" sp-wrap-curly)
  ("(" sp-wrap-round)
  ("[" sp-wrap-square)
  ("M-r" sp-rewrap-sexp)
  ("]" sp-swap-enclosing-sexp)
  ;; ---
  ("M--" undo)
  ("q" nil))
#+END_SRC
